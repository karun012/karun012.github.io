<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>programming on Karun Ramakrishnan</title><link>https://www.karun.dev/tags/programming/</link><description>Recent content in programming on Karun Ramakrishnan</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 23 Apr 2022 18:00:00 +0530</lastBuildDate><atom:link href="https://www.karun.dev/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Why I recommend playing with Haskell</title><link>https://www.karun.dev/posts/why-i-recommend-playing-with-haskell/</link><pubDate>Sat, 23 Apr 2022 18:00:00 +0530</pubDate><guid>https://www.karun.dev/posts/why-i-recommend-playing-with-haskell/</guid><description>I primarily program in Scala. A few years ago, I got into Haskell programming when the director of engineering at the company that I worked for told me about it and let me set up a Haskell study group. It’s a language which you probably won’t use in real life unless you work for a company that can afford to play with languages like these. Haskell gave me the first taste of FP.</description></item><item><title>Control your code</title><link>https://www.karun.dev/posts/control-your-code/</link><pubDate>Thu, 23 Dec 2021 16:00:00 -0700</pubDate><guid>https://www.karun.dev/posts/control-your-code/</guid><description>One of the things I strive for is to have full control over things that I can actually control. Life, emotions and even the code I write for a living. There will be things in life that are out of your control, so don&amp;rsquo;t worry about those.
In the nine odd years of software engineering that I have done, I have learned to use feature toggles for code branch control. Yes, I&amp;rsquo;m talking about dynamically controlling which code gets executed in production using an incredibly simple technique.</description></item><item><title>Eight years of Scala</title><link>https://www.karun.dev/posts/eight-years-of-scala/</link><pubDate>Thu, 16 Dec 2021 19:00:00 -0700</pubDate><guid>https://www.karun.dev/posts/eight-years-of-scala/</guid><description>It started as a love-hate relationship. Today, after almost eight years of writing Scala code, I think I&amp;rsquo;m ready to say that it&amp;rsquo;s one of the best JVM languages.
Coming from a Java background, my first taste of functional programming was in Haskell. Yup! That super scary language. It&amp;rsquo;s so concise that you barely have to write code :P. Back in the day I did some fairly hardcore Haskell programming and to this day I think everyone who wants to learn programming should learn Haskell just to understand the beauty of pure functional programming.</description></item><item><title>Make it better when you can</title><link>https://www.karun.dev/posts/cleaner-than-before/</link><pubDate>Sat, 27 Nov 2021 12:00:00 -0700</pubDate><guid>https://www.karun.dev/posts/cleaner-than-before/</guid><description>I personally believe in the boy scout rule for Engineers
Always leave the code better than you found it
If everyone said - the code was bad when I started working on it and there were no tests, so I am going to do my job of adding this new feature and I&amp;rsquo;ll just leave it the way it is - we will never have clean code.
Imagine working on a new version of an existing class.</description></item><item><title>Tools of the trade - Intellij IDEA - Part 1</title><link>https://www.karun.dev/posts/tools-of-the-trade-1/</link><pubDate>Tue, 22 Sep 2020 21:00:00 -0700</pubDate><guid>https://www.karun.dev/posts/tools-of-the-trade-1/</guid><description>This is a multipart series where I want to show you what tools I use every day and some of my favorite tricks. If you would like to know anything specific or if you know any tricks, do reach out to me.
I feel developers need to get really good at using tools. I started off using Eclipse, but eventually got over it and started using Intellij IDEA. I have been a Vim guy and have not had a chance to learn Emacs.</description></item><item><title>My nine and a half commandments</title><link>https://www.karun.dev/posts/nine-and-a-half-commandments/</link><pubDate>Sat, 01 Aug 2020 11:00:00 -0700</pubDate><guid>https://www.karun.dev/posts/nine-and-a-half-commandments/</guid><description>In software engineering every little thing matters. These are some of the principles I really like to follow -
Write tests before writing code unless there is no logic in your code. If there is no test then there should be no code. If you write the test after you write the code, you most likely will be testing behavior and not what you intended to code Write clear, clean, and concise code that works no matter what Do not try to cure a global pandemic while writing a little feature.</description></item><item><title>Premature abstraction</title><link>https://www.karun.dev/posts/premature-abstraction/</link><pubDate>Thu, 23 Jul 2020 21:00:00 -0700</pubDate><guid>https://www.karun.dev/posts/premature-abstraction/</guid><description>TL;DR - Stick to something like the rule of three. Premature abstraction in any system is almost always going to be problematic, expensive and frustrating. Never add abstractions because you &amp;ldquo;might&amp;rdquo; need it in the future. Add it when you &amp;ldquo;really&amp;rdquo; need it
Abstraction is a good way of hiding complexity. In your software development life, you probably have created well rounded abstractions that made your life easier. While abstractions make things cleaner and easier to work with, premature abstraction will have the opposite effect.</description></item><item><title>Lessons from TDD - Logic in unit tests</title><link>https://www.karun.dev/posts/test-the-test/</link><pubDate>Mon, 20 Jul 2020 12:28:17 -0700</pubDate><guid>https://www.karun.dev/posts/test-the-test/</guid><description>TL;DR - Try not to have logic in unit tests. The whole point of a unit test is to make sure some logic works
TDD was something new to me about 8 years ago. I worked as a test automation engineer for a large corporation during my internship. My job was to automate integration tests. When I became a full time developer and starting writing production code, I learned about TDD.</description></item></channel></rss>