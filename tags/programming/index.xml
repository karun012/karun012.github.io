<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>programming on OneBucketSambaar</title><link>https://www.onebucketsambaar.com/tags/programming/</link><description>Recent content in programming on OneBucketSambaar</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 23 Jul 2020 21:00:00 -0700</lastBuildDate><atom:link href="https://www.onebucketsambaar.com/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Premature abstraction</title><link>https://www.onebucketsambaar.com/posts/premature-abstraction/</link><pubDate>Thu, 23 Jul 2020 21:00:00 -0700</pubDate><guid>https://www.onebucketsambaar.com/posts/premature-abstraction/</guid><description>TL;DR - Stick to something like the rule of three. Premature abstraction in a any system is almost always going to be problematic, expensive and frustrating. Never add abstractions because you &amp;ldquo;might&amp;rdquo; need it in the future. Add it when you &amp;ldquo;really&amp;rdquo; need it
Abstraction is a good way of hiding complexity. In your software development life, you probably have created well rounded abstractions that made your life easier.</description></item><item><title>Lessons from TDD - Logic in unit tests</title><link>https://www.onebucketsambaar.com/posts/test-the-test/</link><pubDate>Mon, 20 Jul 2020 12:28:17 -0700</pubDate><guid>https://www.onebucketsambaar.com/posts/test-the-test/</guid><description>TL;DR - Try not to have logic in unit tests. The whole point of a unit test is to make sure some logic works
TDD was something new to me about 8 years ago. I worked as a test automation engineer for a large corporation during my internship. My job was to automate integration tests. When I became a full time developer and starting writing production code, I learned about TDD.</description></item></channel></rss>