<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Design on Karun Ramakrishnan</title><link>https://www.karun.dev/tags/design/</link><description>Recent content in Design on Karun Ramakrishnan</description><generator>Hugo -- 0.145.0</generator><language>en-us</language><lastBuildDate>Thu, 23 Jul 2020 21:00:00 -0700</lastBuildDate><atom:link href="https://www.karun.dev/tags/design/index.xml" rel="self" type="application/rss+xml"/><item><title>Premature abstraction</title><link>https://www.karun.dev/posts/premature-abstraction/</link><pubDate>Thu, 23 Jul 2020 21:00:00 -0700</pubDate><guid>https://www.karun.dev/posts/premature-abstraction/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>TL;DR&lt;/strong> - Stick to something like the rule of three. Premature abstraction in any system is almost always going to be problematic, expensive and frustrating. Never add abstractions because you &amp;ldquo;might&amp;rdquo; need it in the future. Add it when you &amp;ldquo;really&amp;rdquo; need it&lt;/p>&lt;/blockquote>
&lt;p>Abstraction is a good way of hiding complexity. In your software development life, you probably have created well rounded abstractions that made your life easier. While abstractions make things cleaner and easier to work with, premature abstraction will have the opposite effect.&lt;/p></description></item></channel></rss>