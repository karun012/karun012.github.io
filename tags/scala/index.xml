<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Scala on Karun Ramakrishnan</title><link>https://www.karun.dev/tags/scala/</link><description>Recent content in Scala on Karun Ramakrishnan</description><generator>Hugo -- 0.145.0</generator><language>en-us</language><lastBuildDate>Mon, 20 Jul 2020 12:28:17 -0700</lastBuildDate><atom:link href="https://www.karun.dev/tags/scala/index.xml" rel="self" type="application/rss+xml"/><item><title>Lessons from TDD - Logic in unit tests</title><link>https://www.karun.dev/posts/test-the-test/</link><pubDate>Mon, 20 Jul 2020 12:28:17 -0700</pubDate><guid>https://www.karun.dev/posts/test-the-test/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>TL;DR&lt;/strong> - Try not to have logic in unit tests. The whole point of a unit test is to make sure some logic works&lt;/p>&lt;/blockquote>
&lt;p>TDD was something new to me about 8 years ago. I worked as a test automation engineer for a large corporation during my internship. My job was to automate integration tests. When I became a full time developer and starting writing production code, I learned about TDD. I realized that it&amp;rsquo;s one of the best tools that I had ever come across. Since then my mantra has been red-green-refactor. I have met newer engineers who ask the question - why test it if it works?&lt;/p></description></item></channel></rss>