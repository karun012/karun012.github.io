[{"content":"Live Templates have made my programming life a lot easier. There is a lot of boilerplate code that we type every single day. I like using Groovy script to build some powerful Scala live templates.\nUnfortunately the documentation for this is almost non existent. Oh well!\nI ended up looking at the IntelliJ Scala plugin’s source to find the available variables for live templates. You can see it here - IntelliJ live template variables\nGroovy scripts in templates are executed like this - groovyScript(\u0026lt;Script String\u0026gt;, [arg1, arg2...])\nInstead of just talking about it, let us work through an example. We will build a live template to convert a simple case class into a Postgres table creation sql script. Imagine you had a case class like this -\ncase class Person( firstName: String, lastName: String, birthday: LocalDate, address: String, zipCode: String, phoneNumber: String ) We will come up with an easy way turn this into -\nCREATE TABLE person ( first_name VARCHAR(x) NOT NULL, last_name VARCHAR(x) NOT NULL, birthday TIMESTAMP NOT NULL, address VARCHAR(x) NOT NULL, zip_code VARCHAR(x) NOT NULL, phone_number VARCHAR(x) NOT NULL ); Start by creating a live template: Preferences -\u0026gt; Editor -\u0026gt; Live Templates Click on Scala Add a new template Give it an abbreviation - pgtable Give it a description Select Scala as the applicable context so that it only shows up in Scala code Click Apply just so you don\u0026rsquo;t lose your changes accidentally Add the following template text CREATE TABLE $TABLENAME$ ( $FIELDS$ ); We have declared two variables - TABLENAME and FIELDS. We’ll have to define what they mean next. From the Scala plugin source above we can see two useful variables: scala_className and scala_primaryConstructorParams.\nClick on Edit Variables Set snakeCase(scala_className) as the expression for the TABLENAME variable This will put the snake cased version of the Scala class name in place of the TABLENAME variable. These are the variables/functions that ship with IntelliJ Now for the fun part. Let us build the groovy script that will output the fields with their types. We will use scala_primaryConstructorParams as our input to the groovy script. It outputs all the params with their types in a single string. For example if our case class had i: Int and j: String, it outputs \u0026quot;i: Int, j: String The simple way to achieve this is to Split the string on comma Map over each item in the list Split on : to get the field name and type Lookup the sql type for each Scala type Snake case the field Write it out as \u0026lt;field\u0026gt; \u0026lt;sql type\u0026gt; NOT NULL, - We can work on optional values later Join the strings with a new line This will be our groovy script\ntypesMap = [Int: \u0026#39;INT\u0026#39;, String: \u0026#39;VARCHAR(x)\u0026#39;, LocalDate: \u0026#39;TIMESTAMP\u0026#39;].withDefault { key -\u0026gt; key.toLowerCase() }; def toSnakeCase(s) { return s.replaceAll( /([A-Z])/, /_$1/ ).toLowerCase().replaceAll( /^_/, \u0026#39;\u0026#39; ); }; def toSql(fieldAndType) { split = fieldAndType.tokenize(\u0026#39;:\u0026#39;); field = split[0].trim(); scalaType = split[1].trim(); sqlType = typesMap[scalaType]; return toSnakeCase(field) + \u0026#39; \u0026#39; + sqlType + \u0026#39; NOT NULL,\u0026#39;; }; tokens = _1.tokenize(\u0026#39;,\u0026#39;); dbFields = tokens.collect { token -\u0026gt; return toSql(token.trim()) }; sqlFields = dbFields.join(\u0026#39; \\\\n \u0026#39;); return sqlFields; Now for the FIELDS variable use the groovy script above - `groovyScript(\u0026quot;\u0026quot;, scala_primaryConstructorParams); Unfortunately the place where you put this string in IntelliJ makes it a single line string. I wish they added a feature to make the editor bigger. So for now you have to end everything with a semicolon to make sure it works as a single line script\nSave it. Your cursor needs to be in the context of the case class. So something like\ncase class Foo() { \u0026lt;cursor goes here\u0026gt; } Start typing the abbreviation, hit tab and it should put the sql script where your cursor is Add more types to the typesMap if you like Think about how you would deal with optional values, primary keys, etc Write to Jetbrains and ask them to make the script editor larger ¯\\_(ツ)_/¯ Want to work on a better scripting plugin? Write to me :P ","permalink":"https://www.karun.dev/posts/intellij-live-templates-scala/","summary":"\u003cp\u003eLive Templates have made my programming life a lot easier. There is a lot of boilerplate code that we type every single day. I like using Groovy script to build some powerful Scala live templates.\u003c/p\u003e\n\u003cp\u003eUnfortunately the documentation for this is almost non existent. Oh well!\u003c/p\u003e\n\u003cp\u003eI ended up looking at the IntelliJ Scala plugin’s source to find the available variables for live templates. You can see it here - \u003ca href=\"https://github.com/JetBrains/intellij-scala/blob/ddf0b94cc5f9802f66a73f140657a70b2d4719fd/scala/scala-impl/resources/liveTemplates/scala.xml\"\u003eIntelliJ live template variables\u003c/a\u003e\u003c/p\u003e","title":"IntelliJ Live Templates With Groovy Script"},{"content":"Disclaimer Do this at your own risk. I\u0026rsquo;m not responsible if your stuff breaks. You\u0026rsquo;ll be allowing Automator to control your computer. If you have weird automations you can potentially create security holes in your computer. Again, I\u0026rsquo;m in no way responsible if you do any of that. This is just a what I did to make something work.\nLet\u0026rsquo;s get to it then This morning I came across the duckyPad and almost made an impulsive buy. It looked really cool and had a ton of functionality, but I have the Moonlander which is a really nice keyboard and realized it could do what I wanted.\nMy goal was to be able to switch between Slack, IntelliJ and iTerm on MacOS with at most two keys per app. I could have alt + tabbed through open apps to get to each application, but that’s too much work. Here\u0026rsquo;s what I did to switch between apps using keyboard shortcuts and the Moonlander -\nCreate an automation to launch the app you need Go to Automator Make a New Document Select Quick Action Select no input from the Workflow receives current dropdown On the left side pane, search for Launch Application Drag and drop it into your workflow (the large grey area) Select the application you need from the dropdown Save it and give it a name Add a keyboard shortcut to run the quick action Go to System Preferences -\u0026gt; Keyboard -\u0026gt; Shortcuts Select Services Scroll all the way to the bottom until you find the action you just created Add a unique keyboard shortcut for it Allow apps to control your computer MacOS does not easily allow apps to control your computer Go to System Preferences -\u0026gt; Security and Privacy -\u0026gt; Accessibility Unlock and add Automator to the list PS: You\u0026rsquo;re allowing Automator to control your computer. Please make sure you are okay with it Add the keyboard shortcut to your Moonlander/Ergodox using the configuration tool You know how ;-) Profit!\nIf the application has not launched, it will be launched by the automation. If it is already running, MacOS will switch to the application.\n","permalink":"https://www.karun.dev/posts/switch-apps-on-macos-using-automator-and-moonlander/","summary":"\u003ch1 id=\"disclaimer\"\u003eDisclaimer\u003c/h1\u003e\n\u003cp\u003eDo this at your own risk. I\u0026rsquo;m not responsible if your stuff breaks. You\u0026rsquo;ll be allowing Automator to control your computer. If you have weird automations you can potentially create security holes in your computer. Again, I\u0026rsquo;m in no way responsible if you do any of that. This is just a what I did to make something work.\u003c/p\u003e\n\u003ch1 id=\"lets-get-to-it-then\"\u003eLet\u0026rsquo;s get to it then\u003c/h1\u003e\n\u003cp\u003eThis morning I came across the \u003ca href=\"https://github.com/dekuNukem/duckyPad\"\u003educkyPad\u003c/a\u003e and almost made an impulsive buy. It looked really cool and had a ton of functionality, but I have the \u003ca href=\"https://www.zsa.io/moonlander\"\u003eMoonlander\u003c/a\u003e which is a really nice keyboard and realized it could do what I wanted.\u003c/p\u003e","title":"Switch Apps on MacOS Using Keyboard Shortcuts"},{"content":"I primarily program in Scala. A few years ago, I got into Haskell programming when the director of engineering at the company that I worked for told me about it and let me set up a Haskell study group. It’s a language which you probably won’t use in real life unless you work for a company that can afford to play with languages like these. Haskell gave me the first taste of FP. My coding style entirely changed once I got into it and learned pure functional programming.\nYour perspective on programming changes completely once you play with Haskell. Programming without state, effects, and other things, and with everything being lazy, requires a lot of relearning, but it is definitely worth it. Reasoning about your program’s correctness can be completely achieved using the type system. Everything is a function – takes something in, gives something out. Debugging becomes incredibly easy because you know what each function will do. It is easy to trace bugs. You will fall in love with recursion. Before I learned Haskell, I was always a bit afraid of writing recursive functions. Haskell forces you to learn to write recursive solutions.\nFibonacci\u0026rsquo;s sequence is one of the problems that made me fall in love with Haskell. Let us see why. Fibonacci of n is defined mathematically as – Fn = Fn-1 + Fn-2 where n \u0026gt; 1. Simple enough, yes? Now let’s write it in Haskell. The function will be defined as:\nfibonacci :: Integer -\u0026gt; Integer That is pretty simple, right? Fibonacci is a function that takes an integer and returns an integer. We know that fibonacci of 0 is 0 and fibonacci of 1 is 1, so continuing the implementation:\nfibonacci :: Integer -\u0026gt; Integer fibonacci 0 = 0 fibonacci 1 = 1 It’s as simple as that. You can either continue defining fibonacci of each number, which would be weird, or you can take the formula and write the next implementation.\nfibonacci :: Integer -\u0026gt; Integer fibonacci 0 = 0 fibonacci 1 = 1 fibonacci n = fibonacci (n - 1) + fibonacci (n - 2) That is it! You have a function that can find the nth Fibonacci number. I know it’s an easy example, but once you get a hang of the language, everything will start to look as simple as this. Probably not incredibly simple, but you get the idea.\nI absolutely love functional programming. There are concepts in Haskell that are very complex, but a lot of it is pretty nice to learn. Trust me, the way you program will entirely change once you learn pure functional programming. I’m sure there are other functional languages that you can learn, but Haskell forces you to think in a pure functional way.\nLet me know why you love Haskell if you have already played with it. Cheers! This is what I used when I started - http://www.learnyouahaskell.com/\n","permalink":"https://www.karun.dev/posts/why-i-recommend-playing-with-haskell/","summary":"\u003cp\u003eI primarily program in Scala. A few years ago, I got into Haskell programming when the director of engineering at the company that I worked for told me about it and let me set up a Haskell study group. It’s a language which you probably won’t use in real life unless you work for a company that can afford to play with languages like these. Haskell gave me the first taste of FP. My coding style entirely changed once I got into it and learned pure functional programming.\u003c/p\u003e","title":"Why I recommend playing with Haskell"},{"content":" There is way more logic in any of Nityananda\u0026rsquo;s speeches than SS Rajamouli\u0026rsquo;s RRR\nKarun Ramakrishnan, April 15 2022\nI love watching movies far too much. There are times I watch some movies multiple times. For instance, I\u0026rsquo;ve watched Rajinikanth\u0026rsquo;s Sivaji over 25 times and I still enjoy it. There are times when some movies turn out to be crap. I wanted to start explaining what I understood from such movies and to spark debates around them.\nNTR Jr starts out on a rescue mission to find a child from his tribe who was taken by a British couple since she was a tattoo artist (not sure how you\u0026rsquo;re licensed at that age). Ram Charan is trying to arm his entire clan with guns since his father told him – Load, Aim, Shoot. He joins the British Indian police force so that one day he can steal a single consignment of guns. I think he could have easily stolen the rifles that he eventually tries to steal without having to go through the police academy and all the promotions required to finally get there. Anyhow, Ram Charan, to get a promotion, goes on a hunt for NTR Jr with no explanation of whom he is hunting. Without knowing that it\u0026rsquo;s him they become wonderful friends when a train almost crashes over a fisherman child\u0026rsquo;s head, and they rescue him just by using hand signals, a rope, a bike, a horse, and a flag. Lots of child labor in this movie BTW. NTR Jr wants to get into Scott castle where his mission lies. To achieve that, he figures out that there is a lovely lady that he has to befriend. Now that they are friends, NTR Jr explains that he has to befriend the lady. Ram Charan uses hundreds of rusty nails to flatten the lady\u0026rsquo;s car\u0026rsquo;s tires. Lady asks NTR Jr for a ride to the market, somehow falls in love with him during those ten minutes and invites him to a party. Both our heroes go to the party and a dance-off ensues. Seeing that the lady wants NTR Jr to win, Ram Charan gives up. Lady invites him to the castle for tea, when she offers to give him a ride since he won the dance-off. NTR Jr meets the abducted child at the castle, who makes so much noise and yet does not alert the guards. He tells her that he will be back for her.\nNTR Jr decides to storm the castle the next night. Ram Charan figures out that NTR Jr was the one that he was hunting while he lies on a bed bitten by a snake whose venom almost kills him, but for which NTR Jr has a homemade antidote. They storm the castle with a truck full of tigers, deer and other animals. Ram Charan gains enough strength to do his boxing training meanwhile and shows up at the castle in a burning four horse-driven carriage. He fights NTR Jr, finally arrests him and throws him in jail to receive his promotion. Then he writes to Alia Bhatt and decides to rescue NTR Jr from death penalty. During his rescue mission, Scott finds out what is happening. The forces go after Ram Charan and NTR Jr. NTR Jr kicks Ram Charan in the face and almost kills him, but manages to escape with the tattoo artist.\nNow Ram Charan gets thrown in jail in the solitary confinement cell. NTR Jr meets Alia Bhatt who explains Ram\u0026rsquo;s mission. NTR Jr decides to go on another rescue mission for Ram Charan. Our lovely Brit lady appears out of nowhere and shows him the prison\u0026rsquo;s blueprints for a brief moment. He uses the same beat that they used in the dance off to find the right cell, rips open the door and carries an injured Ram over his shoulder. Ram becomes NTR Jr\u0026rsquo;s arms. Could\u0026rsquo;ve used stealth to rescue him, but why are we talking logic here. Anyhow, they end up in the forest, Ram with a broken leg that NTR Jr fixes using the juice of some leaves. Special forces almost kill NTR Jr while he drinks water from a lake, but Ram shows up with unlimited arrows and a bow, leg fully fixed in a matter of minutes. Thirty minutes of fighting later, Scott\u0026rsquo;s lady dies. Ram gives NTR Jr a gun and says the same thing his father told him – Load, Aim, Fire. Scott dies. They get a bigger consignment of guns to Ram\u0026rsquo;s clan. NTR Jr ends up with his British lady love.\nSee how logical the whole story was? This is what I understood from SS Rajamouli\u0026rsquo;s RRR. Maybe I need to watch it again, but I\u0026rsquo;ve already wasted so much time in life that I do not want to risk it. I hope you love the movie.\nPS: Decent visual effects, but I think the director needs to give up on his Prince of Persia scenes that he has stuck to since Baahubali 2\n","permalink":"https://www.karun.dev/posts/what-i-understood-from-the-movie-rrr/","summary":"\u003cblockquote\u003e\n\u003cp\u003eThere is way more logic in any of Nityananda\u0026rsquo;s speeches than SS Rajamouli\u0026rsquo;s RRR\u003c/p\u003e\n\u003cp\u003eKarun Ramakrishnan, April 15 2022\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eI love watching movies far too much. There are times I watch some movies multiple times. For instance, I\u0026rsquo;ve watched Rajinikanth\u0026rsquo;s Sivaji over 25 times and I still enjoy it. There are times when some movies turn out to be crap. I wanted to start explaining what I understood from such movies and to spark debates around them.\u003c/p\u003e","title":"What I understood from the movie - RRR"},{"content":"One of the things I strive for is to have full control over things that I can actually control. Life, emotions and even the code I write for a living. There will be things in life that are out of your control, so don\u0026rsquo;t worry about those.\nIn the nine odd years of software engineering that I have done, I have learned to use feature toggles for code branch control. Yes, I\u0026rsquo;m talking about dynamically controlling which code gets executed in production using an incredibly simple technique. I have used this in a lot of personal projects, too. It works!\nThis is a very simple example -\nval featureIsOn = \u0026lt;check if feature is on in the database via a cache or whatever\u0026gt; if (featureIsOn) { //Do things the new way } else { //Do things the old way } It is incredibly simple to do. All you need is a common database that all your services have access to, a little table of feature toggles - name and boolean columns, a stupid map that is thread safe to hold your features in memory and a thread that refreshes that map (of course you can just use whatever cache you are already using. I\u0026rsquo;m just keeping everything simple and under my control). You can throw a UI in front of all this to turn things off and on. Toggles accumulate over time and you just clean them up once you\u0026rsquo;ve turned them on in production and you\u0026rsquo;re happy with it.\nLater on in life you can go fancy and build more complex feature toggling capabilities.\nSave yourself from sleepless nights and use feature toggles.\n","permalink":"https://www.karun.dev/posts/control-your-code/","summary":"\u003cp\u003eOne of the things I strive for is to have full control over things that I can actually control. Life, emotions and even the code I write for a living. There will be things in life that are out of your control, so don\u0026rsquo;t worry about those.\u003c/p\u003e\n\u003cp\u003eIn the nine odd years of software engineering that I have done, I have learned to use feature toggles for code branch control. Yes, I\u0026rsquo;m talking about dynamically controlling which code gets executed in production using an incredibly simple technique. I have used this in a lot of personal projects, too. It works!\u003c/p\u003e","title":"Control your code"},{"content":"It started as a love-hate relationship. Today, after almost eight years of writing Scala code, I think I\u0026rsquo;m ready to say that it\u0026rsquo;s one of the best JVM languages.\nComing from a Java background, my first taste of functional programming was in Haskell. Yup! That super scary language. It\u0026rsquo;s so concise that you barely have to write code :P. Back in the day I did some fairly hardcore Haskell programming and to this day I think everyone who wants to learn programming should learn Haskell just to understand the beauty of pure functional programming. The barrier to entry with Haskell is extremely high. It takes a while to become productive.\nNow Scala on the other hand is very forgiving. Since it has the OO parts of Java and almost all functional concepts, it makes programming a joy. The more hardcore functional aspects need some external dependencies, but you probably don\u0026rsquo;t need those for the most part. There are some really hardcore parts of Scala that will make you very confused, but overall it\u0026rsquo;s probably the only JVM language that I really love. Clojure is cool, too. Here\u0026rsquo;s hoping Dotty and the future of Scala will make it even better and more widely adopted.\nIDEs like IntelliJ have gotten better with Scala. The refactoring ability with Java code is so good with IntelliJ that a lot of day to day tasks become really easy. With Scala it\u0026rsquo;s a little harder, but it\u0026rsquo;s already pretty concise, so it should not be that big of a problem. It has definitely caught up compared to what it was in 2015.\nIf I was asked to pick a single JVM language to program in for the rest of my life while being stranded on an island in the middle of the Pacific, it will be Scala.\nIf I had to pick a single non-JVM language, it will definitely be Haskell. Although I have to spend some time to get up to speed :)\nWhat would you pick? Cheers!\n","permalink":"https://www.karun.dev/posts/eight-years-of-scala/","summary":"\u003cp\u003eIt started as a love-hate relationship. Today, after almost eight years of writing Scala code, I think I\u0026rsquo;m ready to say that it\u0026rsquo;s one of the best JVM languages.\u003c/p\u003e\n\u003cp\u003eComing from a Java background, my first taste of functional programming was in Haskell. Yup! That super scary language. It\u0026rsquo;s so concise that you barely have to write code :P. Back in the day I did some fairly hardcore Haskell programming and to this day I think everyone who wants to learn programming should learn Haskell just to understand the beauty of pure functional programming. The barrier to entry with Haskell is extremely high. It takes a while to become productive.\u003c/p\u003e","title":"Eight years of Scala"},{"content":"Having grown up with a lot of interest in music, I have always enjoyed listening to music in all kinds of genres and many different languages. A couple of years ago I was finally able to get into audiophile grade equipment. It\u0026rsquo;s a fantastic hobby especially if you enjoy music. Trust me, you can blow all your money on a pair of headphones if you choose to. Check out Sennheiser HE 1 and HIFIMAN Shangri-La. You can buy a very good car for that price. So please don\u0026rsquo;t blow it all on these things.\nThere are lots of myths in the audiophile world. People will tell you that you need the best digital to analog converter, the best amplifier, cables made of gold, expensive power supplies, etc. Do not believe in all that nonsense. Expensive does not mean good quality and in the same way made in certain countries does not mean bad quality.\nThis might end up being a multi part series about my journey into this world and why I love it. We shall see. Maybe you\u0026rsquo;ll get into this world.\nAs I write this post I\u0026rsquo;m listening to some of my favorite tracks on a Sony WF-1000XM4. If you\u0026rsquo;re in the market for a pair of true wireless earbuds, these are pretty incredible. After the burn-in period they sound really, really good. Although the stock tips are crap. There are good tips that work with these. At the moment they are my favorite pair after the Sennheiser Momentum True Wireless earbuds. What I use for analytical and critical listening are completely different. They are wired! Wireless can never beat wired headphones/IEMs. Not in a million years. Of course nobody is paying me to say this :P\nSo what\u0026rsquo;s the difference between some mainstream headphone/earphone and what people call audiophile grade equipment? Well there are tons of differences. Trust me on this - there are headphones/earphones that are very expensive, but they are horrific. There are cheaper alternatives that are 100x better.\nThe first thing you\u0026rsquo;ll notice with good equipment (not necessarily expensive) is placement of instruments. You can precisely tell where each person was sitting (in the studio or on the stage). Every instrument sounds distinct. The thing about audio is the artist always wants you to listen to it in a certain way. A lot of equipment change how the audio plays and it\u0026rsquo;s just not how the artist intended you to listen to it. The amount of detail you get from each instrument is incredible when you use good equipment. Once you concentrate, you\u0026rsquo;ll hear the vocalist\u0026rsquo;s breath. Each strum of the string on a guitar is extremely clear. The percussion instruments sound very, very real. You\u0026rsquo;ll feel how wide the stage/studio is. The bass you hear has to be very real, not heavy. It should extend to the lowest possible frequencies. It\u0026rsquo;s almost impossible to get this kind of detail on a regular earphone/headphone even if they are super expensive.\nOh and the next time a headphone or earphone company advertises their products saying they have the best bass or the biggest equalizer, walk away from it.\nAh, just as we end here Raajakumara by Vijay Prakash starts playing. Check it out!\n","permalink":"https://www.karun.dev/posts/audiophile-part-1/","summary":"\u003cp\u003eHaving grown up with a lot of interest in music, I have always enjoyed listening to music in all kinds of genres and many different languages. A couple of years ago I was finally able to get into audiophile grade equipment. It\u0026rsquo;s a fantastic hobby especially if you enjoy music. Trust me, you can blow all your money on a pair of headphones if you choose to. Check out Sennheiser HE 1 and HIFIMAN Shangri-La. You can buy a very good car for that price. So please don\u0026rsquo;t blow it all on these things.\u003c/p\u003e","title":"Audiophile - what the heck is wrong with my headphone/earphone?"},{"content":"Oh hello. It\u0026rsquo;s weirdly cold in Los Angeles today. It\u0026rsquo;s those four days of winter that we get. Just watched a good video that someone I know sent me that talks about living life without hope and the mood changed from let me listen to Mr. Bungle to let me think about life while those lentils finish cooking.\nI once heard a very good statement - I go about my life using my own compass of what is right or wrong. What is right or wrong comes from the experiences I have had in life and how I think our society should work. That to me has been one of the best statements ever and I have tried to live by it.\nSo what really is the moral compass? The dictionary says - used in reference to a person\u0026rsquo;s ability to judge what is right and wrong and act accordingly. But how do you know your moral compass is correct?\nIf you ask people who share your values, your moral compass will always be pointing in the right direction. If you ask people who have different values, your moral compass will always be pointing in the wrong direction. Can you spot-check your own values every now and then to see if things are right or wrong? Probably. Life experiences will teach you things that are right and wrong.\nUnfortunately there is no easy way to calibrate your moral compass perfectly. But you can definitely make sure it\u0026rsquo;s roughly pointing in the right direction. Being mindful, listening, doing things that do not harm or hurt others, appreciating the good, doing things that have been considered moral, etc. tend to push it in the right direction.\nOh my! The lentils are done. It\u0026rsquo;s time to cook. Cheers!\n","permalink":"https://www.karun.dev/posts/moral-compass/","summary":"\u003cp\u003eOh hello. It\u0026rsquo;s weirdly cold in Los Angeles today. It\u0026rsquo;s those four days of winter that we get. Just watched a good video that someone I know sent me that talks about living life without hope and the mood changed from let me listen to Mr. Bungle to let me think about life while those lentils finish cooking.\u003c/p\u003e\n\u003cp\u003eI once heard a very good statement - I go about my life using my own compass of what is right or wrong. What is right or wrong comes from the experiences I have had in life and how I think our society should work. That to me has been one of the best statements ever and I have tried to live by it.\u003c/p\u003e","title":"The Moral Compass"},{"content":"I personally believe in the boy scout rule for Engineers\nAlways leave the code better than you found it\nIf everyone said - the code was bad when I started working on it and there were no tests, so I am going to do my job of adding this new feature and I\u0026rsquo;ll just leave it the way it is - we will never have clean code.\nImagine working on a new version of an existing class. You duplicate the class and notice that there were no tests for the previous version. You now have two choices:\nBuild your new class and start using it everywhere the old one was used, and hope that every branch of your new class will get test coverage from some usage upstream or Add full test coverage for your new class and then use it everywhere the old one was used The first option sounds like the easiest. Obviously you\u0026rsquo;ll spend less time building your new class because you do not have to write any tests specific to it. The problem is with the \u0026ldquo;hope\u0026rdquo; part of it. The hope that your class will get test coverage from some usage upstream. IMHO, this is a dangerous approach. Developing the skill of saying - sure, whoever wrote the old class did not think about tests, but I will - takes a lot of practice.\nThe same principle applies everywhere. You can leave the society the way it is and not fix the problems or you can choose to fix it. While I agree with the statement - if it\u0026rsquo;s not broken, let\u0026rsquo;s not fix it - it\u0026rsquo;s important to do things the right way when you have the opportunity to start fresh.\n","permalink":"https://www.karun.dev/posts/cleaner-than-before/","summary":"\u003cp\u003eI personally believe in the boy scout rule for Engineers\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eAlways leave the code better than you found it\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eIf everyone said - the code was bad when I started working on it and there were no tests, so I am going to do my job of adding this new feature and I\u0026rsquo;ll just leave it the way it is - we will never have clean code.\u003c/p\u003e\n\u003cp\u003eImagine working on a new version of an existing class. You duplicate the class and notice that there were no tests for the previous version. You now have two choices:\u003c/p\u003e","title":"Make it better when you can"},{"content":"Note: Use this at your own risk! This worked for me on Ubuntu 20.04\nUntil it is supported on 64 bit distros\nAdd armhf sudo dpkg --add-architecture armhf\nsudo apt update\nwget https://dtcooper.github.io/raspotify/raspotify-latest.deb\nsudo dpkg -i raspotify-latest.deb\nIf it fails, install missing dependencies. Usually libasound2.\nsudo apt install libasound2\nIf that breaks then apt --fix-broken install\nOnce more sudo dpkg -i raspotify-latest.deb\n","permalink":"https://www.karun.dev/posts/raspotify-64-bit-armhf/","summary":"\u003cp\u003eNote: Use this at your own risk! This worked for me on Ubuntu 20.04\u003c/p\u003e\n\u003cp\u003eUntil it is supported on 64 bit distros\u003c/p\u003e\n\u003ch5 id=\"add-armhf\"\u003eAdd armhf\u003c/h5\u003e\n\u003cp\u003e\u003ccode\u003esudo dpkg --add-architecture armhf\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003esudo apt update\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ewget https://dtcooper.github.io/raspotify/raspotify-latest.deb\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003esudo dpkg -i raspotify-latest.deb\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eIf it fails, install missing dependencies. Usually libasound2.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003esudo apt install libasound2\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eIf that breaks then\n\u003ccode\u003eapt --fix-broken install\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eOnce more\n\u003ccode\u003esudo dpkg -i raspotify-latest.deb\u003c/code\u003e\u003c/p\u003e","title":"Install raspotify on Ubuntu server 20.04 (64 bit)/64 bit Armhf"},{"content":"This is a multipart series where I want to show you what tools I use every day and some of my favorite tricks. If you would like to know anything specific or if you know any tricks, do reach out to me.\nI feel developers need to get really good at using tools. I started off using Eclipse, but eventually got over it and started using Intellij IDEA. I have been a Vim guy and have not had a chance to learn Emacs. For a while I did use the Vim plugin in Intellij. It works great, but once you start using the in-built features of Intellij, you will see that it is a very powerful tool.\nThere are tons of screencasts, videos, tutorials and everything out there to learn these things. This is just me showing you one little thing every now and then, and hey, if you find it useful, cheers! I won\u0026rsquo;t tell you about a million different things at a time and I will also not tell you about the time I traveled to Oregon in the rainy season and how beautiful it was.\nBear in mind that I\u0026rsquo;m using a Mac. The key combinations might be slightly different, but the key map under preferences should help you find these.\nExtend Selection I use this A LOT. Really, A LOT! Extend selection selects blocks of code. On the Mac it is bound to Cmd + W. It\u0026rsquo;s not only useful for selecting, but you can navigate a lot better with this. If your cursor is at the beginning of a block of code, it is easy to use extend selection to select the entire block of code and do things with the selection. If you are pointing at an open paren, you can very easily extend selection to the close paren and navigate to the end with the right arrow key. You can do a ton of more things once you start getting used to it. The opposite of this is shrink selection. It is bound to Cmd + Shift + W.\nI will not show you a video or a gif. Play with it today and if you find it useful, come back for more.\n","permalink":"https://www.karun.dev/posts/tools-of-the-trade-1/","summary":"\u003cp\u003eThis is a multipart series where I want to show you what tools I use every day and some of my favorite tricks. If you would like to know anything specific or if you know any tricks, do reach out to me.\u003c/p\u003e\n\u003cp\u003eI feel developers need to get really good at using tools. I started off using Eclipse, but eventually got over it and started using Intellij IDEA. I have been a Vim guy and have not had a chance to learn Emacs. For a while I did use the Vim plugin in Intellij. It works great, but once you start using the in-built features of Intellij, you will see that it is a very powerful tool.\u003c/p\u003e","title":"Tools of the trade - Intellij IDEA - Part 1"},{"content":"In software engineering every little thing matters. These are some of the principles I really like to follow -\nWrite tests before writing code unless there is no logic in your code. If there is no test then there should be no code. If you write the test after you write the code, you most likely will be testing behavior and not what you intended to code Write clear, clean, and concise code that works no matter what Do not try to cure a global pandemic while writing a little feature. The business need for that will be part of a different story if it can be afforded Yes, O(n^2) vs O(n) vs O(log n) vs O(n log n) matters! It\u0026rsquo;s not enough if the code looks pretty Think about costs. If your beautiful code goes live and ends up wasting a million dollars for nothing, it\u0026rsquo;s not great Learn to use the powers of the IDE. It doesn\u0026rsquo;t cost $199 for nothing Always think about the code you are writing. At least twice. Maybe even three times if you can afford it. Check, double check and triple check if you can It\u0026rsquo;s essential to have graceful degradation. Broken software results in angry users Do not reinvent the wheel because you want to, but also do not add a huge library for 3 lines of logic The half - Be nice. It is important! (This is the half because it has nothing to do with the principles above. But it\u0026rsquo;s still important!) ","permalink":"https://www.karun.dev/posts/nine-and-a-half-commandments/","summary":"\u003cp\u003eIn software engineering every little thing matters. These are some of the principles I really like to follow -\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eWrite tests before writing code unless there is no logic in your code. If there is no test then there should be no code. If you write the test after you write the code, you most likely will be testing behavior and not what you intended to code\u003c/li\u003e\n\u003cli\u003eWrite clear, clean, and concise code that works no matter what\u003c/li\u003e\n\u003cli\u003eDo not try to cure a global pandemic while writing a little feature. The business need for that will be part of a different story if it can be afforded\u003c/li\u003e\n\u003cli\u003eYes, O(n^2) vs O(n) vs O(log n) vs O(n log n) matters! It\u0026rsquo;s not enough if the code looks pretty\u003c/li\u003e\n\u003cli\u003eThink about costs. If your beautiful code goes live and ends up wasting a million dollars for nothing, it\u0026rsquo;s not great\u003c/li\u003e\n\u003cli\u003eLearn to use the powers of the IDE. It doesn\u0026rsquo;t cost $199 for nothing\u003c/li\u003e\n\u003cli\u003eAlways think about the code you are writing. At least twice. Maybe even three times if you can afford it. Check, double check and triple check if you can\u003c/li\u003e\n\u003cli\u003eIt\u0026rsquo;s essential to have graceful degradation. Broken software results in angry users\u003c/li\u003e\n\u003cli\u003eDo not reinvent the wheel because you want to, but also do not add a huge library for 3 lines of logic\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch5 id=\"the-half---be-nice-it-is-important-this-is-the-half-because-it-has-nothing-to-do-with-the-principles-above-but-its-still-important\"\u003eThe half - Be nice. It is important! (This is the half because it has nothing to do with the principles above. But it\u0026rsquo;s still important!)\u003c/h5\u003e","title":"My nine and a half commandments"},{"content":" TL;DR - Stick to something like the rule of three. Premature abstraction in any system is almost always going to be problematic, expensive and frustrating. Never add abstractions because you \u0026ldquo;might\u0026rdquo; need it in the future. Add it when you \u0026ldquo;really\u0026rdquo; need it\nAbstraction is a good way of hiding complexity. In your software development life, you probably have created well rounded abstractions that made your life easier. While abstractions make things cleaner and easier to work with, premature abstraction will have the opposite effect.\nImagine working on a new feature. You start building parts of it either top down or bottom up (I tend to prefer top down over bottom up). Almost immediately you start seeing little patterns of duplicated code. Voila! You make an abstraction and it is beautiful. Life continues, you get your tasty lunch, get that coffee and go back to writing more code.\nYou start adding more features. To work with the growing complexity you try to make your abstraction more accommodating. Before you know it the abstraction that started to look like a TV remote has now become a microwave oven that can also tell you a joke, and has sprouted horns. The problem is not that creating that abstraction is bad. It is just the timing of it all. The abstraction got created too soon. All the duplicated code that seemed messy and hard to maintain is just in a different place. It is probably even harder to maintain this code now.\nThe maintainable way of creating abstractions is to fully understand your problem domain first. If you feel you will need this abstraction right at the start, stop and think about it for a little bit. There could very well be just one instance of this and you may not need it at all. The next instance might be entirely different. If you wait until you see more need for the abstraction, it is not anymore complex or expensive to introduce it at a later time. On the other hand, if you introduce it now and want to get out of it after you\u0026rsquo;ve made it incredibly complex, it will be expensive and frustrating.\nThe rule of three as popularised by Martin Fowler is probably a good rule to follow ¯\\_(ツ)_/¯. I personally try to follow it.\n","permalink":"https://www.karun.dev/posts/premature-abstraction/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eTL;DR\u003c/strong\u003e - Stick to something like the rule of three. Premature abstraction in any system is almost always going to be problematic, expensive and frustrating. Never add abstractions because you \u0026ldquo;might\u0026rdquo; need it in the future. Add it when you \u0026ldquo;really\u0026rdquo; need it\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eAbstraction is a good way of hiding complexity. In your software development life, you probably have created well rounded abstractions that made your life easier. While abstractions make things cleaner and easier to work with, premature abstraction will have the opposite effect.\u003c/p\u003e","title":"Premature abstraction"},{"content":" TL;DR - Try not to have logic in unit tests. The whole point of a unit test is to make sure some logic works\nTDD was something new to me about 8 years ago. I worked as a test automation engineer for a large corporation during my internship. My job was to automate integration tests. When I became a full time developer and starting writing production code, I learned about TDD. I realized that it\u0026rsquo;s one of the best tools that I had ever come across. Since then my mantra has been red-green-refactor. I have met newer engineers who ask the question - why test it if it works?\nIf you work in a large codebase, you\u0026rsquo;ll realize that refactoring an existing system is relatively crazier if it has a lack of test coverage. Especially when the code is business critical. Having a well tested system gives you way more confidence in refactoring since you know that if you mess something up, there will most likely be a test case that fails. Now, I\u0026rsquo;m not saying that if all tests pass, the system functions as expected. That\u0026rsquo;s not guaranteed unless all tests were written correctly. I\u0026rsquo;ve seen tests that are wrong which result in wrong code. With enough test coverage, at least I don\u0026rsquo;t have to take the car out for a spin every time I tighten a screw.\nOne of the biggest flaws I have seen in testing is the use of logic in tests. The purpose of a test is to make sure a certain piece of code works the way it is supposed to. The moment you add some logic in the test, the test starts to become complex. Here are two fun things I\u0026rsquo;ve learned -\nLoops around tests I have come across test suites where a bunch of test methods are wrapped in a loop. Think of tests for a generic DAO that works with multiple tables. If you want to make sure it works with all the tables, do not wrap all the tests in loop and execute them against the tables.\nclass FooDao(val table: String) { def writeStuff(stuff: Stuff): Unit def readStuff(): Seq[Stuff] } class FooTest extends FunSuite with Matchers { Seq(\u0026#34;tableA\u0026#34;, \u0026#34;tableB\u0026#34;, \u0026#34;tableC\u0026#34;).forEach { table =\u0026gt; val dao = new FooDao(table) //test write //test read } } At least in Intellij if you run one of the tests independently, it\u0026rsquo;ll tell youthat the test passed. But try putting a failing assertion in it and you\u0026rsquo;ll notice that the test does not actually run. The correct way to write this test is to use shared behavior - https://www.scalatest.org/user_guide/sharing_tests.\nConditions in test code It is harder to follow test code that has conditional logic. Conditionals imply that you need to have multiple tests/suites instead. If your test has conditions, is there test code that tests you test?\nTake the case of beta features. If you have certain tests that need to work when a beta feature is turned on, and all other tests need to work in both cases, it\u0026rsquo;s always best to duplicate the tests and have one test that covers all the cases plus the ones specific for the beta feature, and another that does not have the tests for the beta feature but specifically turns it off for testing. That way when your beta feature code is cleaned up, you just have to delete the old test and not worry about whether or not you deleted too much.\nThere are many more little things you can do to avoid having logic in tests. These are the two most important ones that I have come across a lot.\n","permalink":"https://www.karun.dev/posts/test-the-test/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eTL;DR\u003c/strong\u003e - Try not to have logic in unit tests. The whole point of a unit test is to make sure some logic works\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eTDD was something new to me about 8 years ago. I worked as a test automation engineer for a large corporation during my internship. My job was to automate integration tests. When I became a full time developer and starting writing production code, I learned about TDD. I realized that it\u0026rsquo;s one of the best tools that I had ever come across. Since then my mantra has been red-green-refactor. I have met newer engineers who ask the question - why test it if it works?\u003c/p\u003e","title":"Lessons from TDD - Logic in unit tests"},{"content":"What I do I\u0026rsquo;m a full stack software engineer in the native advertising space with over a decade of experience writing software. I mostly program in Scala, JavaScript/TypeScript, Java and Python. I have programmed in Haskell just out of interest in learning pure functional programming.\nI also write, play the guitar, and enjoy cooking.\nHow to contact me social at thegrumpysage dot com. My email should be listed on my github account.\n","permalink":"https://www.karun.dev/about/","summary":"\u003ch2 id=\"what-i-do\"\u003eWhat I do\u003c/h2\u003e\n\u003cp\u003eI\u0026rsquo;m a full stack software engineer in the native advertising space with over a decade of experience writing software.\nI mostly program in Scala, JavaScript/TypeScript, Java and Python. I have programmed in Haskell just out of interest in learning pure functional programming.\u003c/p\u003e\n\u003cp\u003eI also write, play the guitar, and enjoy cooking.\u003c/p\u003e\n\u003ch2 id=\"how-to-contact-me\"\u003eHow to contact me\u003c/h2\u003e\n\u003cp\u003esocial at thegrumpysage dot com. My email should be listed on my \u003ca href=\"https://github.com/karun012/\"\u003egithub account\u003c/a\u003e.\u003c/p\u003e","title":"About Me"}]